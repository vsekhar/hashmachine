// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: hashmachine.proto

package hashmachine

import (
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// HashFunctionOutputLength describes whether a HashFunction has fixed or
// variable length output.
//
// Programs using a HashFunction with variable length output must also set
// hash_output_length_bytes in their HashConfig.
type HashFunctionOutputLength int32

const (
	HashFunctionOutputLength_HASHFUNCTIONOUTPUTLENGTH_UNKNOWN  HashFunctionOutputLength = 0
	HashFunctionOutputLength_HASHFUNCTIONOUTPUTLENGTH_FIXED    HashFunctionOutputLength = 1
	HashFunctionOutputLength_HASHFUNCTIONOUTPUTLENGTH_VARIABLE HashFunctionOutputLength = 2
)

// Enum value maps for HashFunctionOutputLength.
var (
	HashFunctionOutputLength_name = map[int32]string{
		0: "HASHFUNCTIONOUTPUTLENGTH_UNKNOWN",
		1: "HASHFUNCTIONOUTPUTLENGTH_FIXED",
		2: "HASHFUNCTIONOUTPUTLENGTH_VARIABLE",
	}
	HashFunctionOutputLength_value = map[string]int32{
		"HASHFUNCTIONOUTPUTLENGTH_UNKNOWN":  0,
		"HASHFUNCTIONOUTPUTLENGTH_FIXED":    1,
		"HASHFUNCTIONOUTPUTLENGTH_VARIABLE": 2,
	}
)

func (x HashFunctionOutputLength) Enum() *HashFunctionOutputLength {
	p := new(HashFunctionOutputLength)
	*p = x
	return p
}

func (x HashFunctionOutputLength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashFunctionOutputLength) Descriptor() protoreflect.EnumDescriptor {
	return file_hashmachine_proto_enumTypes[0].Descriptor()
}

func (HashFunctionOutputLength) Type() protoreflect.EnumType {
	return &file_hashmachine_proto_enumTypes[0]
}

func (x HashFunctionOutputLength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashFunctionOutputLength.Descriptor instead.
func (HashFunctionOutputLength) EnumDescriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{0}
}

// HashFunction specifies the hash function to use when evaluating the
// hashmachine program.
type HashFunction int32

const (
	HashFunction_HASHFUNCTION_UNKNOWN  HashFunction = 0
	HashFunction_HASHFUNCTION_SHA_256  HashFunction = 1
	HashFunction_HASHFUNCTION_SHA3_512 HashFunction = 2
)

// Enum value maps for HashFunction.
var (
	HashFunction_name = map[int32]string{
		0: "HASHFUNCTION_UNKNOWN",
		1: "HASHFUNCTION_SHA_256",
		2: "HASHFUNCTION_SHA3_512",
	}
	HashFunction_value = map[string]int32{
		"HASHFUNCTION_UNKNOWN":  0,
		"HASHFUNCTION_SHA_256":  1,
		"HASHFUNCTION_SHA3_512": 2,
	}
)

func (x HashFunction) Enum() *HashFunction {
	p := new(HashFunction)
	*p = x
	return p
}

func (x HashFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_hashmachine_proto_enumTypes[1].Descriptor()
}

func (HashFunction) Type() protoreflect.EnumType {
	return &file_hashmachine_proto_enumTypes[1]
}

func (x HashFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashFunction.Descriptor instead.
func (HashFunction) EnumDescriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{1}
}

// OpCode identifies the operation to be performed.
type OpCode int32

const (
	OpCode_OPCODE_UNKNOWN OpCode = 0
	// OPCODE_INVALID invalidates a program if it appears anywhere in the list
	// of opcodes.
	//
	// Implementations should not check for this opcode and should instead use
	// the opcode for testing handling of unknown opcodes.
	//
	// OPCODE_INVALID is distinct from OPCODE_UNKNOWN. OPCODE_UNKNOWN is the
	// default value and represents an opcode that has not been set, rather than
	// an opcode that is set but to an invalid or unrecognized value.
	OpCode_OPCODE_INVALID OpCode = 1
	// OPCODE_PUSH_INPUT pushes the input value at 'index' onto the stack.
	//
	// The program is invalid if there is no input at 'index'.
	OpCode_OPCODE_PUSH_INPUT OpCode = 2
	// OPCODE_PUSH_BYTES pushes 'payload' onto the stack.
	//
	// The program is invalid if there is no 'payload'.
	OpCode_OPCODE_PUSH_BYTES OpCode = 3
	// OPCODE_POP_CHILDREN_PUSH_HASH pops metadata.branchingfactor values
	// from the stack, hashing each in pop order, gets the hash sum and pushes
	// it onto the stack. This is equivalent to OPCODE_POP_N_PUSH_HASH where
	// N == medatadata.branchingfactor.
	//
	// OPCODE_POP_CHILDREN_PUSH_HASH saves from repeatedly encoding a count
	// of values to pop for the common case where we are popping a fixed number
	// of children to produce a parent in a tree of hashes.
	//
	// The program is invalid if the stack underflows.
	OpCode_OPCODE_POP_CHILDREN_PUSH_HASH OpCode = 4
	// OPCODE_POP_N_PUSH_HASH pops 'index' values from the stack, hashing
	// each in pop order, gets the hash sum and pushes it onto the stack.
	//
	// OPCODE_POP_N_PUSH_HASH ignores metadata.branchingfactor. This opcode
	// is useful when hashing variable numbers of inputs such as when creating
	// a digest of peaks of a growing Merkle Mountain Range.
	OpCode_OPCODE_POP_N_PUSH_HASH OpCode = 5
)

// Enum value maps for OpCode.
var (
	OpCode_name = map[int32]string{
		0: "OPCODE_UNKNOWN",
		1: "OPCODE_INVALID",
		2: "OPCODE_PUSH_INPUT",
		3: "OPCODE_PUSH_BYTES",
		4: "OPCODE_POP_CHILDREN_PUSH_HASH",
		5: "OPCODE_POP_N_PUSH_HASH",
	}
	OpCode_value = map[string]int32{
		"OPCODE_UNKNOWN":                0,
		"OPCODE_INVALID":                1,
		"OPCODE_PUSH_INPUT":             2,
		"OPCODE_PUSH_BYTES":             3,
		"OPCODE_POP_CHILDREN_PUSH_HASH": 4,
		"OPCODE_POP_N_PUSH_HASH":        5,
	}
)

func (x OpCode) Enum() *OpCode {
	p := new(OpCode)
	*p = x
	return p
}

func (x OpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_hashmachine_proto_enumTypes[2].Descriptor()
}

func (OpCode) Type() protoreflect.EnumType {
	return &file_hashmachine_proto_enumTypes[2]
}

func (x OpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCode.Descriptor instead.
func (OpCode) EnumDescriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{2}
}

// HashConfig specifies the configuration for hashing operations used in
// verifying the hashmachine program.
type HashConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashFunction HashFunction `protobuf:"varint,1,opt,name=hash_function,json=hashFunction,proto3,enum=hashmachine.HashFunction" json:"hash_function,omitempty"`
	// hash_output_length_bytes is the number of bytes to read from a variable-
	// length hash function.
	//
	// For hash functions with variable-length outputs, this field must be set
	// and must be greater than zero, otherwise the program is invalid.
	//
	// For hashes with fixed-length outputs, this must not be set or set to
	// zero, otherwise the program is invalid.
	HashOutputLengthBytes uint32 `protobuf:"varint,2,opt,name=hash_output_length_bytes,json=hashOutputLengthBytes,proto3" json:"hash_output_length_bytes,omitempty"`
}

func (x *HashConfig) Reset() {
	*x = HashConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hashmachine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashConfig) ProtoMessage() {}

func (x *HashConfig) ProtoReflect() protoreflect.Message {
	mi := &file_hashmachine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashConfig.ProtoReflect.Descriptor instead.
func (*HashConfig) Descriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{0}
}

func (x *HashConfig) GetHashFunction() HashFunction {
	if x != nil {
		return x.HashFunction
	}
	return HashFunction_HASHFUNCTION_UNKNOWN
}

func (x *HashConfig) GetHashOutputLengthBytes() uint32 {
	if x != nil {
		return x.HashOutputLengthBytes
	}
	return 0
}

// ProgramMetadata provides metadata to verify and execute the hashmachine
// program.
type ProgramMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashConfig *HashConfig `protobuf:"bytes,1,opt,name=hash_config,json=hashConfig,proto3" json:"hash_config,omitempty"`
	// expected_input_count is the number of byte strings the program expects
	// to be provided when the program is executed. Executions with a different
	// number of byte strings as inputs (regardless of whether they are used)
	// must fail.
	ExpectedInputCount uint32 `protobuf:"varint,3,opt,name=expected_input_count,json=expectedInputCount,proto3" json:"expected_input_count,omitempty"`
	// branching_factor is the branching factor of the tree of hashes used to
	// create the program. If the program uses OPCODE_POP_CHILDREN_PUSH_HASH
	// then branching_factor must be set and non-zero, otherwise the program is
	// invalid. If the program does not use OPCODE_POP_CHILDREN_PUSH_HASH,
	// then branching_factor is ignored.
	BranchingFactor uint32 `protobuf:"varint,4,opt,name=branching_factor,json=branchingFactor,proto3" json:"branching_factor,omitempty"`
}

func (x *ProgramMetadata) Reset() {
	*x = ProgramMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hashmachine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgramMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgramMetadata) ProtoMessage() {}

func (x *ProgramMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_hashmachine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgramMetadata.ProtoReflect.Descriptor instead.
func (*ProgramMetadata) Descriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{1}
}

func (x *ProgramMetadata) GetHashConfig() *HashConfig {
	if x != nil {
		return x.HashConfig
	}
	return nil
}

func (x *ProgramMetadata) GetExpectedInputCount() uint32 {
	if x != nil {
		return x.ExpectedInputCount
	}
	return 0
}

func (x *ProgramMetadata) GetBranchingFactor() uint32 {
	if x != nil {
		return x.BranchingFactor
	}
	return 0
}

// Op represents a single operation in the hashmachine program. An Op can be
// evaluated using its opcode and parameters as well as the current stack of
// the hashmachine.
type Op struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opcode OpCode `protobuf:"varint,1,opt,name=opcode,proto3,enum=hashmachine.OpCode" json:"opcode,omitempty"`
	// Parameters used by some opcodes
	Index   uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Op) Reset() {
	*x = Op{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hashmachine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Op) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Op) ProtoMessage() {}

func (x *Op) ProtoReflect() protoreflect.Message {
	mi := &file_hashmachine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Op.ProtoReflect.Descriptor instead.
func (*Op) Descriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{2}
}

func (x *Op) GetOpcode() OpCode {
	if x != nil {
		return x.Opcode
	}
	return OpCode_OPCODE_UNKNOWN
}

func (x *Op) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Op) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *ProgramMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Ops      []*Op            `protobuf:"bytes,2,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *Program) Reset() {
	*x = Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hashmachine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Program) ProtoMessage() {}

func (x *Program) ProtoReflect() protoreflect.Message {
	mi := &file_hashmachine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Program.ProtoReflect.Descriptor instead.
func (*Program) Descriptor() ([]byte, []int) {
	return file_hashmachine_proto_rawDescGZIP(), []int{3}
}

func (x *Program) GetMetadata() *ProgramMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Program) GetOps() []*Op {
	if x != nil {
		return x.Ops
	}
	return nil
}

var file_hashmachine_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.EnumValueOptions)(nil),
		ExtensionType: (*HashFunctionOutputLength)(nil),
		Field:         54435,
		Name:          "hashmachine.output_length",
		Tag:           "varint,54435,opt,name=output_length,enum=hashmachine.HashFunctionOutputLength",
		Filename:      "hashmachine.proto",
	},
}

// Extension fields to descriptor.EnumValueOptions.
var (
	// optional hashmachine.HashFunctionOutputLength output_length = 54435;
	E_OutputLength = &file_hashmachine_proto_extTypes[0]
)

var File_hashmachine_proto protoreflect.FileDescriptor

var file_hashmachine_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3e, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x68, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x61, 0x0a, 0x02, 0x4f, 0x70, 0x12, 0x2b, 0x0a, 0x06, 0x6f,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x03, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x73,
	0x2a, 0x8b, 0x01, 0x0a, 0x18, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x20, 0x48, 0x41, 0x53, 0x48, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4f, 0x55, 0x54,
	0x50, 0x55, 0x54, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x41, 0x53, 0x48, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x41, 0x53, 0x48, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x69,
	0x0a, 0x0c, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x14, 0x48, 0x41, 0x53, 0x48, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x14, 0x48, 0x41, 0x53, 0x48,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36,
	0x10, 0x01, 0x1a, 0x04, 0x98, 0xca, 0x1a, 0x01, 0x12, 0x1f, 0x0a, 0x15, 0x48, 0x41, 0x53, 0x48,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x5f, 0x35, 0x31,
	0x32, 0x10, 0x02, 0x1a, 0x04, 0x98, 0xca, 0x1a, 0x02, 0x2a, 0x9d, 0x01, 0x0a, 0x06, 0x4f, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x50, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x50,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45,
	0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x04, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x50, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x4e, 0x5f, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x05, 0x3a, 0x6f, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0xa9,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76, 0x73, 0x65, 0x6b, 0x68, 0x61, 0x72,
	0x2f, 0x68, 0x61, 0x73, 0x68, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hashmachine_proto_rawDescOnce sync.Once
	file_hashmachine_proto_rawDescData = file_hashmachine_proto_rawDesc
)

func file_hashmachine_proto_rawDescGZIP() []byte {
	file_hashmachine_proto_rawDescOnce.Do(func() {
		file_hashmachine_proto_rawDescData = protoimpl.X.CompressGZIP(file_hashmachine_proto_rawDescData)
	})
	return file_hashmachine_proto_rawDescData
}

var file_hashmachine_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_hashmachine_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hashmachine_proto_goTypes = []interface{}{
	(HashFunctionOutputLength)(0),       // 0: hashmachine.HashFunctionOutputLength
	(HashFunction)(0),                   // 1: hashmachine.HashFunction
	(OpCode)(0),                         // 2: hashmachine.OpCode
	(*HashConfig)(nil),                  // 3: hashmachine.HashConfig
	(*ProgramMetadata)(nil),             // 4: hashmachine.ProgramMetadata
	(*Op)(nil),                          // 5: hashmachine.Op
	(*Program)(nil),                     // 6: hashmachine.Program
	(*descriptor.EnumValueOptions)(nil), // 7: google.protobuf.EnumValueOptions
}
var file_hashmachine_proto_depIdxs = []int32{
	1, // 0: hashmachine.HashConfig.hash_function:type_name -> hashmachine.HashFunction
	3, // 1: hashmachine.ProgramMetadata.hash_config:type_name -> hashmachine.HashConfig
	2, // 2: hashmachine.Op.opcode:type_name -> hashmachine.OpCode
	4, // 3: hashmachine.Program.metadata:type_name -> hashmachine.ProgramMetadata
	5, // 4: hashmachine.Program.ops:type_name -> hashmachine.Op
	7, // 5: hashmachine.output_length:extendee -> google.protobuf.EnumValueOptions
	0, // 6: hashmachine.output_length:type_name -> hashmachine.HashFunctionOutputLength
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	6, // [6:7] is the sub-list for extension type_name
	5, // [5:6] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_hashmachine_proto_init() }
func file_hashmachine_proto_init() {
	if File_hashmachine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hashmachine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hashmachine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgramMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hashmachine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Op); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hashmachine_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hashmachine_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_hashmachine_proto_goTypes,
		DependencyIndexes: file_hashmachine_proto_depIdxs,
		EnumInfos:         file_hashmachine_proto_enumTypes,
		MessageInfos:      file_hashmachine_proto_msgTypes,
		ExtensionInfos:    file_hashmachine_proto_extTypes,
	}.Build()
	File_hashmachine_proto = out.File
	file_hashmachine_proto_rawDesc = nil
	file_hashmachine_proto_goTypes = nil
	file_hashmachine_proto_depIdxs = nil
}
