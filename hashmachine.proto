syntax = "proto3";

package hashmachine;

option go_package = "github.com/vsekhar/hashmachine";

import "google/protobuf/descriptor.proto";

// HashFunctionOutputLength describes whether a HashFunction has fixed or
// variable length output.
//
// Programs using a HashFunction with variable length output must also set
// hash_output_length_bytes in their HashConfig.
enum HashFunctionOutputLength {
    HASHFUNCTIONOUTPUTLENGTH_UNKNOWN = 0;
    HASHFUNCTIONOUTPUTLENGTH_FIXED = 1;
    HASHFUNCTIONOUTPUTLENGTH_VARIABLE = 2;
}

extend google.protobuf.EnumValueOptions {
    HashFunctionOutputLength output_length = 54435;
}

// HashFunction specifies the hash function to use when evaluating the
// hashmachine program.
enum HashFunction {
    HASHFUNCTION_UNKNOWN = 0;
    HASHFUNCTION_SHA_256 = 1 [(output_length)=HASHFUNCTIONOUTPUTLENGTH_FIXED];
    HASHFUNCTION_SHA3_512 = 2 [(output_length)=HASHFUNCTIONOUTPUTLENGTH_VARIABLE];
}

// HashConfig specifies the configuration for hashing operations used in
// verifying the hashmachine program.
message HashConfig {
    HashFunction hash_function = 1;

    // hash_output_length_bytes is the number of bytes to read from a variable-
    // length hash function.
    //
    // For hash functions with variable-length outputs, this field must be set
    // and must be greater than zero, otherwise the program is invalid.
    //
    // For hashes with fixed-length outputs, this must not be set or set to
    // zero, otherwise the program is invalid.
    uint32 hash_output_length_bytes = 2;
}

// ProgramMetadata provides metadata to verify and execute the hashmachine
// program.
message ProgramMetadata {
    HashConfig hash_config = 1;

    // expected_input_count is the number of byte strings the program expects
    // to be provided when the program is executed. Executions with a different
    // number of byte strings as inputs (regardless of whether they are used)
    // must fail.
    uint32 expected_input_count = 3;

    // branching_factor is the branching factor of the tree of hashes used to
    // create the program. If the program uses OPCODE_POP_CHILDREN_HASH_AND_PUSH
    // then branching_factor must be set and non-zero, otherwise the program is
    // invalid. If the program does not use OPCODE_POP_CHILDREN_HASH_AND_PUSH,
    // then branching_factor is ignored.
    uint32 branching_factor = 4;

}

// OpCode identifies the operation to be performed.
enum OpCode {
    OPCODE_UNKNOWN = 0;

    // OPCODE_INVALID invalidates a program if it appears anywhere in the list
    // of opcodes.
    //
    // Implementations should not check for this opcode and should instead use
    // the opcode for testing handling of unknown opcodes.
    //
    // OPCODE_INVALID is distinct from OPCODE_UNKNOWN. OPCODE_UNKNOWN is the
    // default value and represents an opcode that has not been set, rather than
    // an opcode that is set but to an invalid or unrecognized value.
    OPCODE_INVALID = 1;

    // OPCODE_PUSH_INPUT pushes the input value at 'index' onto the stack.
    //
    // The program is invalid if there is no input at 'index'.
    OPCODE_PUSH_INPUT = 2;

    // OPCODE_PUSH_BYTES pushes 'payload' onto the stack.
    //
    // The program is invalid if there is no 'payload'.
    OPCODE_PUSH_BYTES = 3;

    // OPCODE_POP_CHILDREN_HASH_AND_PUSH pops metadata.branchingfactor values
    // from the stack, hashing each in pop order, gets the hash sum and pushes
    // it onto the stack. This is equivalent to OPCODE_POP_N_HASH_AND_PUSH where
    // N == medatadata.branchingfactor.
    //
    // OPCODE_POP_CHILDREN_HASH_AND_PUSH saves from repeatedly encoding a count
    // of values to pop for the common case where we are popping a fixed number
    // of children to produce a parent in a tree of hashes.
    //
    // The program is invalid if the stack underflows.
    OPCODE_POP_CHILDREN_HASH_AND_PUSH = 4;

    // OPCODE_POP_N_HASH_AND_PUSH pops 'index' values from the stack, hashing
    // each in pop order, gets the hash sum and pushes it onto the stack.
    //
    // OPCODE_POP_N_HASH_AND_PUSH ignores metadata.branchingfactor. This opcode
    // is useful when hashing variable numbers of inputs such as when creating
    // a digest of peaks of a growing Merkle Mountain Range.
    OPCODE_POP_N_HASH_AND_PUSH = 5;
}

// Op represents a single operation in the hashmachine program. An Op can be
// evaluated using its opcode and parameters as well as the current stack of
// the hashmachine.
message Op {
    OpCode opcode = 1;

    // Parameters used by some opcodes
    uint64 index = 2;
    bytes payload = 3;
}

message Program {
    ProgramMetadata metadata = 1;
    repeated Op ops = 2;
}
